<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Spring Boot 父依赖 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.4</version>
        <relativePath/>
    </parent>

    <!-- 项目基本信息 -->
    <groupId>me.parade</groupId>
    <artifactId>demo-end</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>
    <name>demo-end</name>
    <description>基于RBAC的后台管理系统</description>

    <modules>
        <module>demo-common</module>
        <module>demo-framework</module>
        <module>demo-system</module>
        <module>demo-generator</module>
        <module>demo-api</module>
    </modules>

    <!-- Maven 项目的全局属性配置 -->
    <!-- 在父 pom.xml 中定义这些属性后，所有子模块都会继承这些配置 -->
    <!-- 无需在子模块中重复定义这些属性 -->
    <properties>
    <!-- 
        在 Spring Boot 项目中，spring-boot-starter-parent 会自动读取java.version属性，用于配置 maven-compiler-plugin 的 source 和 target 版本。
        project.build.sourceEncoding：指定源码文件的编码（如 UTF-8），用于编译阶段，确保源代码正确读取和编译。
    project.reporting.outputEncoding：指定 Maven 生成报告（如 Javadoc、测试报告等）时的输出编码。
    这两个属性通常会被 Maven 插件（如 maven-compiler-plugin、maven-javadoc-plugin、maven-surefire-plugin 等）自动读取和应用。
     -->
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- 统一管理 janino 版本号 -->
        <janino.version>3.1.9</janino.version>
        <!-- 统一管理 lombok 版本号 -->
        <lombok.version>1.18.30</lombok.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- 项目模块依赖 -->
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-framework</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-system</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-generator</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- logback 条件表达式需要 janino -->
            <dependency>
                <groupId>org.codehaus.janino</groupId>
                <artifactId>janino</artifactId>
                <version>${janino.version}</version>
            </dependency>
            <!-- 统一管理 lombok 依赖 -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


</project>