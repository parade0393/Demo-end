<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Spring Boot 父依赖 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.4</version>
        <relativePath/>
    </parent>

    <!-- 项目基本信息 -->
    <groupId>me.parade</groupId>
    <artifactId>demo-end</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>
    <name>demo-end</name>
    <description>基于RBAC的后台管理系统</description>

    <modules>
        <module>demo-common</module>
        <module>demo-framework</module>
        <module>demo-system</module>
        <module>demo-generator</module>
        <module>demo-api</module>
        <module>demo-file-service</module>
    </modules>

    <!-- Maven 项目的全局属性配置 -->
    <!-- 在父 pom.xml 中定义这些属性后，所有子模块都会继承这些配置 -->
    <!-- 无需在子模块中重复定义这些属性 -->
    <properties>
    <!-- 
        在 Spring Boot 项目中，spring-boot-starter-parent 会自动读取java.version属性，用于配置 maven-compiler-plugin 的 source 和 target 版本。
        project.build.sourceEncoding：指定源码文件的编码（如 UTF-8），用于编译阶段，确保源代码正确读取和编译。
    project.reporting.outputEncoding：指定 Maven 生成报告（如 Javadoc、测试报告等）时的输出编码。
    这两个属性通常会被 Maven 插件（如 maven-compiler-plugin、maven-javadoc-plugin、maven-surefire-plugin 等）自动读取和应用。
     -->
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- 统一管理 janino 版本号 -->
        <janino.version>3.1.9</janino.version>
        <!-- 统一管理 lombok 版本号 -->
        <lombok.version>1.18.30</lombok.version>
        <!-- 统一管理 springdoc-openapi 版本号 -->
        <springdoc.version>2.8.6</springdoc.version>
        <!-- 数据库相关依赖版本 -->
        <mysql.version>8.0.28</mysql.version>
        <druid.version>1.2.16</druid.version>
        <mybatis-plus.version>3.5.11</mybatis-plus.version>
        <mybatis-plus-generator.version>3.5.11</mybatis-plus-generator.version>
        <velocity.version>2.3</velocity.version>
        <!-- JWT相关依赖版本 -->
        <jjwt.version>0.12.6</jjwt.version>
        <!-- Spring Security版本由spring-boot-starter-parent管理 -->
        <thumbnailator.version>0.4.20</thumbnailator.version>
        <tika.version>3.2.0</tika.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- 项目模块依赖 -->
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-framework</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-system</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-generator</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!-- logback 条件表达式需要 janino -->
            <dependency>
                <groupId>org.codehaus.janino</groupId>
                <artifactId>janino</artifactId>
                <version>${janino.version}</version>
            </dependency>
            <!-- 统一管理 lombok 依赖 -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope><!-- provided 表示该依赖在编译和测试阶段有效，但运行时由容器或JDK提供，不会被打包到最终的部署包中 -->
            </dependency>
            <!-- 统一管理 springdoc-openapi 依赖 -->
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
                <version>${springdoc.version}</version>
            </dependency>
            
            <!-- MySQL驱动 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            
            <!-- Druid连接池 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>
            
            <!-- MyBatis-Plus 
            <type>pom</type>表示这是一个 POM 类型的依赖（不是 jar 包），只用于依赖管理。
            <scope>import</scope>只有在 <dependencyManagement> 里才允许使用 import，表示“导入”另一个 POM 的依赖管理配置。
            这样配置后，mybatis-plus-bom 中声明的所有依赖（如 mybatis-plus-core、mybatis-plus-boot-starter 等）都可以在你的子模块中直接引用，无需再单独指定版本号，统一由 BOM 管理。
            -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-bom</artifactId>
                <version>${mybatis-plus.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Velocity模板引擎 -->
            <dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity-engine-core</artifactId>
                <version>${velocity.version}</version>
            </dependency>
            
            <!-- JWT相关依赖 -->
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-api</artifactId>
                <version>${jjwt.version}</version>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-impl</artifactId>
                <version>${jjwt.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-jackson</artifactId>
                <version>${jjwt.version}</version>
                <scope>runtime</scope>
            </dependency>

            <!-- Apache Tika for MIME type detection -->
            <dependency>
                <groupId>org.apache.tika</groupId>
                <artifactId>tika-bom</artifactId>
                <version>${tika.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Thumbnailator for image compression -->
            <dependency>
                <groupId>net.coobird</groupId>
                <artifactId>thumbnailator</artifactId>
                <version>${thumbnailator.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>


</project>