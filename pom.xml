<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <!-- Spring Boot 父依赖 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.9</version>
        <relativePath/>
    </parent>

    <!-- 项目基本信息 -->
    <groupId>me.parade</groupId>
    <artifactId>demo-end</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>
    <name>demo-end</name>
    <description>基于RBAC的后台管理系统</description>
    
    <modules>
        <module>demo-common</module>
        <module>demo-framework</module>
        <module>demo-system</module>
        <module>demo-generator</module>
        <module>demo-api</module>
    </modules>

    <!-- Maven 项目的全局属性配置 -->
    <!-- 在父 pom.xml 中定义这些属性后，所有子模块都会继承这些配置 -->
    <!-- 无需在子模块中重复定义这些属性 -->
    <properties>
        <java.version>11</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- 统一管理 janino 版本号 -->
    <janino.version>3.1.9</janino.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- 项目模块依赖 -->
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-framework</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-system</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>me.parade</groupId>
                <artifactId>demo-generator</artifactId>
                <version>${project.version}</version>
            </dependency>
             <!-- logback 条件表达式需要 janino -->
            <dependency>
                <groupId>org.codehaus.janino</groupId>
                <artifactId>janino</artifactId>
                <version>${janino.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    
    <build>
        <plugins>
            <!-- Spring Boot Maven 插件配置 -->
            <!-- Spring Boot Maven 插件的主要作用：
                1. 打包：将应用打包成可执行的jar/war包，包含所有依赖和资源
                2. 运行：提供 mvn spring-boot:run 命令来快速启动应用
                3. 依赖管理：自动处理依赖关系，确保版本兼容性
                4. 构建信息：添加构建信息到打包文件中

                这里配置了 excludes 来排除 lombok，因为：
                - lombok 只在编译时需要，运行时不需要
                - 排除 lombok 可以减小最终包的体积
                - 避免潜在的运行时冲突 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 排除依赖配置 -->
                    <excludes>
                        <!-- 排除 lombok 依赖，避免将 lombok 打包到最终的 jar 包中 -->
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>